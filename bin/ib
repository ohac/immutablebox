#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
# vim: filetype=ruby

self_file =
  if File.symlink?(__FILE__)
    require 'pathname'
    Pathname.new(__FILE__).realpath
  else
    __FILE__
  end
$:.unshift(File.dirname(self_file) + "/../lib")

require 'immutablebox'
require 'fileutils'
require 'yaml'

tracker = 'udp://tracker.publicbt.com:80/announce'
priv = false
name = File.basename(FileUtils.pwd)
IB_DIR_GAP = "#{IB_DIR}/gap"
IB_DIR_TORRENTS = "#{IB_DIR}/torrents/#{name}"
IB_DIR_PIECES = "#{IB_DIR}/pieces"
IB_DIR_CURRENT = "#{IB_DIR}/current"
storage = LocalStorage.new(IB_DIR_PIECES)

HOME_DIR = ENV['HOME']
SETTING_DIR = File.join(HOME_DIR, '.ib')
SETTING_FILE = File.join(SETTING_DIR, 'settings.yaml')
unless File.exists?(SETTING_DIR)
  FileUtils.mkdir SETTING_DIR
end
unless File.exists?(SETTING_FILE)
  open(SETTING_FILE, 'w') do |fd|
    setting = {
      'crypt' => {
        'iv' => storage.iv,
        'key' => storage.key,
      },
    }
    fd.puts(YAML.dump(setting))
  end
end
SETTING = YAML.load(File.read(SETTING_FILE))
storage.iv = SETTING['crypt']['iv']
storage.key = SETTING['crypt']['key']

def get_last_torrent
  return unless File.directory? IB_DIR_TORRENTS
  torrents = Dir.entries(IB_DIR_TORRENTS) - ['.', '..']
  return if torrents.empty?
  torrents = torrents.sort_by{|dir| dir.split.first.to_i}
  File.join(IB_DIR_TORRENTS, torrents.last)
end

command = (ARGV.shift or 'help').to_sym
case command
when :commit, :ci
  last_infohash = begin
    torrent = get_last_torrent
    if torrent
      torrentobj = Torrent.new(File.read(torrent))
      torrentobj.info.infohash
    end
  end
  gap = ARGV.shift.nil?
  img = make_torrent(name, '.', tracker, priv, gap)
  if last_infohash
    new_infohash = Torrent.new(img).info.infohash
    exit if last_infohash == new_infohash
  end
  torrentfile = "#{IB_DIR_TORRENTS}/#{Time.now.to_i}.torrent"
  File.open(torrentfile, 'wb') do |fd|
    fd.write(img)
  end
  FileUtils.cp(torrentfile, "#{IB_DIR_CURRENT}/#{name}.torrent")
  begin
    storage.open
    load_torrent(torrentfile) do |piece_hash, piece|
      storage.put(piece_hash, piece)
    end
  ensure
    storage.close
  end
when :init
  FileUtils.mkdir_p IB_DIR_GAP
  FileUtils.mkdir_p IB_DIR_TORRENTS
  FileUtils.mkdir_p IB_DIR_PIECES
  FileUtils.mkdir_p IB_DIR_CURRENT
when :log
  exit unless File.directory? IB_DIR_TORRENTS
  Dir.entries(IB_DIR_TORRENTS).each do |dir|
    next unless /\.torrent\z/ === dir
    puts Time.at(dir.split.first.to_i)
  end
when :status, :st
  torrent = get_last_torrent
  unless torrent
    walk('.') do |file|
      next if file.index("./#{IB_DIR}/") == 0
      filename = file.split('/', 2).last
      puts "? #{filename}"
    end
    exit
  end
  torrentobj = Torrent.new(File.read(torrent))
  begin
    storage.open
    changes = load_torrent(torrent) do |piece_hash, piece|
    end
    changes.each do |file|
      puts "M #{file}"
    end
    trackedfiles = torrentobj.info.files.map do |file|
      if file['path'][0] != IB_DIR
        file['path'].join('/')
      end
    end
    allfiles = []
    walk('.') do |file|
      next if file.index("./#{IB_DIR}/") == 0
      filename = file.split('/', 2).last
      puts "? #{filename}" unless trackedfiles.include?(filename)
    end
  ensure
    storage.close
  end
when :update, :up
  torrent = get_last_torrent
  exit unless torrent
  begin
    storage.open
    changes = load_torrent(torrent) do |piece_hash, piece|
    end
    save_torrent(torrent, storage, changes)
  ensure
    storage.close
  end
when :verify
  p :verify
when :serve
  torrent = get_last_torrent
  if torrent
    torrentobj = Torrent.new(File.read(torrent))
    puts torrentobj.info.magnet
    if fork
      loop do
        multicast_send(torrentobj.info.infohash)
        sleep 5
      end
    else
      cli = ARGV.shift
      if cli == 'deluge'
        puts "add this: #{IB_DIR_CURRENT}/#{name}.torrent"
      else
        system "aria2c --dir=.. --bt-enable-lpd=true --seed-ratio 0.0 -V #{torrent}"
      end
    end
  else
    received = {}
    multicast_recv do |infohash|
      next if received[infohash]
      received[infohash] = true
      cli = ARGV.shift
      if cli == 'deluge'
        puts "add this: magnet:?xt=urn:btih:#{infohash}"
      else
        system "aria2c -V --allow-overwrite=true --bt-enable-lpd=true --seed-ratio 0.0 'magnet:?xt=urn:btih:#{infohash}'"
        exit
      end
    end
  end
else
  p :help
end
